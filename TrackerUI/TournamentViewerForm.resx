<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>